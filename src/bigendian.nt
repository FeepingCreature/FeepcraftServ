module bigendian;

import c.arpa.inet; // hton_

long ntohq(long l) {
  byte[] bs = byte*:&l #[0..8];
  bs[(0, 1, 2, 3, 4, 5, 6, 7)] = bs[(7, 6, 5, 4, 3, 2, 1, 0)];
  return l;
}

alias htonq = ntohq;

class BigEndianDataStream {
  ubyte[auto~] buffer;
  Iterator!ubyte[] sup;
  void init(Iterator!ubyte[] sup) this.sup = sup;
  void readMore() {
    if auto data <- sup buffer ~= data;
    else raise new Error "DataStream empty. ";
  }
  ubyte[] take(int sz) {
    onFailure writeln "@take($sz)";
    while buffer.length < sz
      readMore();
    auto res = buffer[0..sz];
    buffer = type-of buffer: buffer[sz .. $];
    return res;
  }
  ubyte readByte() {
    onFailure writeln "@readByte";
    return take 1 #[0];
  }
  bool readBool() {
    return bool:(take 1 #[0]);
  }
  short readShort() {
    return short[]: take 2 #[0].ntohs();
  }
  int readInt() {
    return int[]: take 4 #[0].ntohl();
  }
  long readLong() {
    return long[]: take 8 #[0].ntohq();
  }
  float readFloat() {
    // return float[]: take 4 #[0];
    auto res = readInt();
    return *float*: &res;
  }
  double readDouble() {
    // return double[]: take 8 #[0];
    auto res = readLong();
    return *double*: &res;
  }
  string readUTF8(int len) {
    return string: take len;
  }
  string readUCS2(int len) {
    auto chars = short[]: take len;
    char[auto~] res;
    for short ch <- chars {
      ch = ntohs ch;
      if ch > 127
        raise new Error "Extended UTF character in UCS2: $(int:ch)! ";
      res ~= char:*byte*:&ch;
    }
    return res[];
  }
  string readString() {
    return readUCS2(readShort() * 2);
  }
}

ubyte x 2 toField(short s) { s = s.htons; return ubyte x 2: s; }
ubyte x 4 toField(int i) { i = i.htonl; return ubyte x 4: i; }
ubyte x 8 toField(long l) { l = l.htonq; return ubyte x 8: l; }
ubyte x 4 toField(float f) { return toField *int*:&f; }
ubyte x 8 toField(double d) { return toField *long*:&d; }

// thanks, tiny utf8-cpp lib
class iterateUTF8 : Iterator!int {
  string str;
  void init(string s) str = s;
  bool advance() {
    if (!str.length) return false;
    
    int stepsize;
    char lead = str[0];
    if (lead < 0x80) stepsize = 1;
    else if (lead >> 5) == 0x6 stepsize = 2;
    else if (lead >> 4) == 0xe stepsize = 3;
    else if (lead >> 3) == 0x1e stepsize = 4;
    else raise new Error "Unrecognized UTF8: $str! ";
    (string part, str) = str[(0..stepsize, stepsize .. $)];
    
    if (part.length == 1) {
      value = int:part[0];
    } else if (part.length == 2) {
      value = ((int:part[0] << 6) & 0x7ff) + int:part[1] & 0x3f;
    } else if (part.length == 3) {
      value = ((int:part[0] << 12) & 0xffff) + (int:part[1] << 6) & 0xfff + int:part[2] & 0x3f;
    } else if (part.length == 4) {
      value = ((int:part[0] << 18) & 0x1f_ffff) + (int:part[1] << 12) & 0x3_ffff + (int:part[2] << 6) & 0xfff + int:part[3] & 0x3f;
    }
    return true;
  }
}

ubyte[] encodeUCS2(string s) {
  ubyte[auto~] res;
  if s.length > 65535 raise new Error "Can't UCS2 encode strings longer than 65535! ";
  int count;
  res ~= [ubyte:0, 0];
  short[auto~] test;
  for auto cp <- new iterateUTF8 s {
    count ++;
    test ~= short:cp;
    res ~= toField short:cp;
  }
  test.free;
  *(ubyte x 2*:res.ptr) = toField short:count;
  return res[];
}
