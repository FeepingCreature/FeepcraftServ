module packet-tx;

import std.socket, std.zlib;
import bigendian, world, drop, base, item;

class PacketTx {
  Socket socket;
  IPlayer ip;
  void init(Socket s, IPlayer ip) (socket, this.ip) = (s, ip);
  void sendPacket(byte kind, ubyte[] data = null) {
    writeln "$(ip.getName())> $$int:kind $(data)";
    socket.send ubyte[]:(&kind#[0..1]);
    if data.length socket.send ubyte[]:data;
  }
  void sendLoginRequest(int eid, string type, ubyte mode, dimension, difficulty, maxplayers) {
    scope ubyte[auto~] data;
    data ~= toField eid;
    data ~= type.encodeUCS2();
    data ~= mode;
    data ~= dimension;
    data ~= difficulty;
    data ~= 0;
    data ~= maxplayers;
    
    sendPacket(0x01, data[]);
  }
  void sendSpawnLocation(int x, y, z) {
    scope ubyte[auto~] data;
    data ~= toField x;
    data ~= toField y;
    data ~= toField z;
    sendPacket(0x06, data[]);
  }
  void sendInventory((Item, int)[] items) {
    scope ubyte[auto~] data;
    data ~= 0; // inv
    data ~= toField short:items.length;
    for auto item <- items
      if item[0] {
        data ~= toField item[0].id;
        data ~= *ubyte*:&item[1];
        data ~= toField short:0;
        data ~= toField short:-1;
      } else {
        data ~= toField short:-1;
      }
    sendPacket(0x68, data[]);
  }
  void sendUnloadChunk(vec2i intPos) {
    scope ubyte[auto~] data;
    data ~= toField intPos.x;
    data ~= toField intPos.y;
    data ~= true;
    // no new data
    data ~= toField short:0;
    data ~= toField short:0;
    data ~= toField int:0;
    sendPacket(0x33, data[]);
  }
  void sendMapChunkColumn(vec2i intPos, (int, World.Chunk)[] chs) {
    scope ubyte[auto~] data;
    data ~= toField intPos.x;
    data ~= toField intPos.y;
    data ~= true;
    short primask;
    for auto ch <- chs /*if (!ch[1].air())*/ {
      primask = short:(primask | 1<<ch[0]);
    }
    data ~= toField primask;
    writeln "send $intPos with mask $primask";
    data ~= toField short:0;
    
    // data ~= *byte*:&intSize.x;
    // data ~= *byte*:&intSize.y;
    // data ~= *byte*:&intSize.z;
    scope ubyte[auto~] types, cMetadata, cLight, cBlocklight, cSkylight;
    for auto _ch <- chs /*if (!_ch[1].air())*/ {
      auto ch = _ch[1];
      types ~= ch.data;
      scope ubyte[auto~] metadata, blocklight, skylight;
      for int y <- 0..16 {
        for int z <- 0..16 {
          for int x <- 0..16 {
            metadata ~= 0;
            blocklight ~= 0xf;
            skylight ~= 0xf;
          }
        }
      }
      for int i <- 0..metadata.length/2 {
        {
          byte (val1, val2) = metadata[(i*2, i*2+1)];
          cMetadata ~= ubyte:$ (val1 << 4) | val2;
        }
        {
          byte (val1, val2) = blocklight[(i*2, i*2+1)];
          cBlocklight ~= ubyte:$ (val1 << 4) | val2;
        }
        {
          byte (val1, val2) = skylight[(i*2, i*2+1)];
          cSkylight ~= ubyte:$ (val1 << 4) | val2;
        }
      }
    }
    scope ubyte[auto~] all;
    scope biomes = [for 0..256: ubyte:0].eval;
    all ~= types[];
    all ~= cMetadata[];
    all ~= cBlocklight[];
    all ~= cSkylight[];
    all ~= biomes[];
    scope def = new Deflate;
    onSuccess def.fini;
    scope compressed = def.deflate all[];
    // writeln "uncompressed size: $(all.length)";
    // writeln "compressed size: $(compressed.length)";
    data ~= toField compressed.length;
    data ~= compressed;
    sendPacket(0x33, data[]);
  }
  void sendPickupItemAnim(int eid, Drop d) {
    scope ubyte[auto~] data;
    data ~= toField d.eid;
    data ~= toField eid;
    sendPacket(0x16, data[]);
  }
  void sendPlayerPosLook(double x, y, z, float yaw, pitch, bool onGround) {
    scope ubyte[auto~] data;
    data ~= toField x;
    // y and stance are swapped. (?)
    data ~= toField double:(y + 1.65);
    data ~= toField y;
    data ~= toField z;
    data ~= toField yaw;
    data ~= toField pitch;
    data ~= *ubyte*:&onGround;
    sendPacket(0x0d, data[]);
  }
  void sendChatMessageJSON(string msg) {
    scope ubyte[auto~] data;
    data ~= msg.encodeUCS2();
    sendPacket(0x03, data[]);
  }
  void sendChatMessage(string msg) {
    sendChatMessageJSON "{\"text\":\"$msg\"}";
  }
  void sendEntitySpawn(int eid, string name, abs-vec3i pos, ubyte yaw, ubyte pitch) {
    scope ubyte[auto~] data;
    data ~= toField eid;
    data ~= name.encodeUCS2();
    data ~= toField pos.x;
    data ~= toField pos.y;
    data ~= toField pos.z;
    data ~= yaw; // rotation
    data ~= pitch; // pitch
    data ~= toField short:0; // current item
    data ~= ubyte:0; // index 0, field byte
    data ~= ubyte:0; // no flags set
    data ~= ubyte:0x7f;
    sendPacket(0x14, data[]);
  }
  void sendPosLook(int eid, abs-vec3i pos, ubyte yaw, ubyte pitch) {
    scope ubyte[auto~] data;
    data ~= toField eid;
    data ~= toField pos.x;
    data ~= toField pos.y;
    data ~= toField pos.z;
    data ~= yaw;
    data ~= pitch;
    sendPacket(0x22, data[]);
  }
  void sendBlockUpdate(vec3i worldPos, short newval) {
    scope ubyte[auto~] data;
    data ~= toField worldPos.x;
    data ~= ubyte:  worldPos.y;
    data ~= toField worldPos.z;
    data ~= toField newval;
    data ~= ubyte:0;
    sendPacket(0x35, data[]);
  }
  void sendPlayerAnim(int eid, ubyte anim) {
    scope ubyte[auto~] data;
    data ~= toField eid;
    data ~= anim;
    sendPacket(0x12, data[]);
  }
  void sendItemSpawn(Drop dr) using dr {
    scope ubyte[auto~] data;
    data ~= toField eid;
    data ~= ubyte:2;
    data ~= toField int:pos.x;
    data ~= toField int:pos.y;
    data ~= toField int:pos.z;
    data ~= ubyte:0; // pitch
    data ~= ubyte:0; // yaw
    data ~= toField int:0;
    // data ~= toField int:item.id;
    // data ~= toField short:0; // speed x
    // data ~= toField short:0; // speed y
    // data ~= toField short:0; // speed z
    sendPacket(0x17, data[]);
  }
  void sendEntityMetadata(int eid, ubyte[] metadata) {
    scope ubyte[auto~] data;
    data ~= toField eid;
    data ~= metadata;
    sendPacket(0x28, data[]);
  }
  void sendEntityRemove(int eid) {
    scope ubyte[auto~] data;
    data ~= ubyte:1;
    data ~= toField eid;
    sendPacket(0x1d, data[]);
  }
  void sendKick(string mesg = null, bool close = true) {
    scope ubyte[auto~] data;
    data ~= mesg.encodeUCS2();
    sendPacket(0xff, data[]);
    if (close)
      socket.close;
  }
  void sendTransactionAccept(ubyte window, short action-number, bool accepted) {
    scope ubyte[auto~] data;
    data ~= window;
    data ~= toField action-number;
    data ~= *ubyte*: &accepted;
    sendPacket(0x6a, data[]);
  }
}
