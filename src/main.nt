module main;

import std.socket, std.boehm, std.thread, std.math, std.random;

import base, simplex, player, server, world;

void main() {
  initBoehm();
  auto rng = getPRNG(23);
  set-handler (Error er) { writeln "!! $er"; invoke-exit "return"; }
  define-exit "return" return;
  auto ls = new Socket;
  ls.reuse true;
  ls.bind(new TcpAddress("0.0.0.0", short:25565));
  ls.listen();
  writeln "Listening. ";
  Player[] players;
  auto playerLock = new Mutex;
  auto tp = new ThreadPool 1;
  auto server = new Server;
  tp.addTask delegate void() {
    while true {
      server.waitRead(1000);
      server.readPackets();
    }
  };
  // auto earth-density = new SimplexNoise rng;
  // auto sand-density = new SimplexNoise rng;

  auto heightmap = new SimplexNoise rng;
  float xeval(SimplexNoise sn, float x, y, z) {
    return sn.eval(x     , y     , z)             / 32f
         + sn.eval(x / 2f, y / 2f, z / 2f)        / 16f
         + sn.eval(x / 4f, y / 4f, z / 4f + 1024) / 8f
         + sn.eval(x / 8f, y / 8f, z / 8f + 2048) / 4f
         + sn.eval(x /16f, y /16f, z /16f + 3096) / 2f
    ;
  }
  auto dg = delegate ubyte(vec3i pos) {
    vec3f fpos = vec3f(pos.x / 16f, pos.y / 16f, pos.z / 16f);
    auto height = xeval(heightmap, vec3f(
      fpos.x + xeval(heightmap, fpos.(vec3f(x, y, z + 1024))) * 4,
      xeval(heightmap, fpos.(vec3f(x, y, z + 3096))) * 4,
      fpos.z + xeval(heightmap, fpos.(vec3f(x, y, z + 2048))) * 4
    )) * 96f * xeval(heightmap, fpos.(vec3f(x, 3, z)));
    if (pos.y < 32 + height) return ubyte:2;
    else return ubyte:0;
  };
  auto world = new World(dg);
  while true {
    auto sock = ls.accept();
    using LockedMutex:server.serverMutex server.connecting ~= IPlayer: new Player (server, world, sock);
  }
}
